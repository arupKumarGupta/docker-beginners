docker version -- spits out version details
docker info -- spits out info regarding configurations and containers and images
docker command line structure:
Old: docker <command> [options] 
New: docker <command> <sub-command> [optons]

Images vs Container
An image is the application we want to run whereas container is an instance to run an image.

Images: from Dockerfile compose or hub.docker.com
Container: 
Ex: nginx
In shell: >docker container run --publish 80:80 --detach [--name <name>]  nginx
Step 1: Download image nginx from hub.docker.com if not present locally.(image name specified as nginx)
Step 2: Start a new container from that image (run command)
Step 3: Opened port 80 on the host ip (publish part with ports specified)
	port forwarding hostPort:portOfTheContainer
	here nginx has default port 80
Step 4: --detach return container id and frees the terminal

Docker commands commands: 
1. docker container ls -- lists running containers
2. docker container stop <container id -- prefix> -- stops the container whose ip prefix matches the container id
3. docker container ls -a -- list all containers
4. docker container logs <conainer name> -- list logs
5. docker container rm <...container ids>
6. docker top <name> -- list processes in container -- actually this process runs on host and the container has access to it.
	check ps aux and you will see same process in case of linux
7. docker container start <name>
8. docker container port <name> -- view ports exposed using -p
9. docker container inspect <name>  -- reveals info about contianer and configs
10. docker container stats <name> -- reveals performance states of the running container
11. docker network ls -- show networks
12.docker network create --driver
13. docker network connect <network name> <container name>
14. docker network disconnect
15. docker netwok inspect -- shows info on networks and containers attached to them
16. docker container run -it --rm <image> <shell>  --- enters into interactive tty and once aborted the container is deleted. --- --rm option

Docker Images: 
Image is a collection of app binaries and dependencies
Not a complete OS. No kernel, kernel modules
Commands:
1. docker image ls -- list images 
2. docker image history <image name>
3. docker image inspect nginx
4. docker pull <image from docker hub>
5. docker image tag <image> [tag] <new image> [tag]
6. docker image build [-t TAGS] <PATH>
7. docker image prune [-a #to remove all unsed images] --- removes dangling images/ cache and volumes to free up space
8. docker system prune --- remove everything

Docker Volumes -- for persisting data outside the container lifecycle
1. docker volume ls  -- list volumes
2. docker container run -d -v <name>:<path> <image> --- named docker volume
3. docker volume create -- create a docker volume AOT #special case

Bind Mounting
Mapping of host files/directory to container file or directory
Basically just 2 locations pointing to same file
skips UFS and host files overwrite any in container
Can't use in Dockerfile, must be in container run
Bind mount ex below.
4. docker container run -v <host-path>:<container-path>

